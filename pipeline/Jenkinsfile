pipeline {
    agent any
    environment {
        WORKSPACE = "${env.WORKSPACE}"+"${env.BUILD_NUMBER}"
    }
    stages {
        stage ('Preparing workspace for build') {
            steps {
                echo "build ${env.BUILD_NUMBER}"
                bat "mkdir ${env.BUILD_NUMBER}"
                //env.WORKSPACE = (pwd)+${env.BUILD_NUMBER}
                //bat "cd ${env.BUILD_NUMBER}"
                }
            }
        stage('Run tests using docker') {
            parallel {
                stage ('UI tests on the chrome in the linux container') {
                    steps {
                        //checkout([$class: 'GitSCM', branches: [[name: 'master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/jujga/TestTaskEvo']]])
                        //run linux with chrome server. change this comment
                        // alternative run: docker-compose -f pipeline/containers/pseudo_compose/docker-compose.yml up --abort-on-container-exit --exit-code-from py_runner
                        bat 'docker-compose -f pipeline/containers/pseudo_compose/docker-compose.yml run --rm py_runner'
                        }
                    }
                stage('API tests in the python container') {
                    steps {
                        //checkout([$class: 'GitSCM', branches: [[name: 'inside_of_docker_container']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/jujga/TestTaskEvo']]])
                        bat 'docker build -f ./pipeline/containers/python_api/Dockerfile -t pytest_runner .'
                        bat 'docker run --rm --mount type=bind,src=' + pwd() + ',target=/tests_project/ pytest_runner'

                        }
                    }
                }

            }
        }

    post {
        always {

            script {
                        allure([
                                //allure commandline: 'allure',
                                includeProperties: false,
                                jdk: '',
                                results: [[path: 'test_results']]
                        ])
                    }
            bat 'docker-compose -f pipeline/containers/pseudo_compose/docker-compose.yml down'
            }
        }
}