pipeline {
    agent any

    stages {

        stage('Run tests using docker') {
            parallel {
                stage ('UI tests on the chrome in the linux container') {
                    steps {
                        checkout([$class: 'GitSCM', branches: [[name: 'inside_of_docker_container']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/jujga/TestTaskEvo']]])
                        //run linux with chrome server
                        bat 'docker run --name ui_tests -d -p 4444:4444 --shm-size=2g selenium/standalone-chrome:3.141.59-20210607'
                        //build container for runner
                        bat 'docker build -f ./pipeline/containers/pseudo_compose/python_runner/Dockerfile -t python_runner .'
                        //run container with runner
                        bat 'docker run --rm --mount type=bind,src=' + pwd() + ',target=/tests_project/ python_runner'

                        }
                    }
                stage('API tests in the python container') {
                    steps {
                        //checkout([$class: 'GitSCM', branches: [[name: 'inside_of_docker_container']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/jujga/TestTaskEvo']]])
                        bat 'docker build -f ./pipeline/containers/python_api/Dockerfile -t pytest_runner .'
                        bat 'docker run --rm --mount type=bind,src=' + pwd() + ',target=/tests_project/ pytest_runner'

                        }
                    }
                }

            }
        }

    post {
        always {

            script {
                        allure([
                                //allure commandline: 'allure',
                                includeProperties: false,
                                jdk: '',
                                results: [[path: 'test_results']]
                        ])
                    }
            bat 'docker stop ui_tests'
            bat 'docker rm ui_tests'

            }
        }
}